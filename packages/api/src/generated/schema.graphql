directive @sanitize(allowedTags: [String], maxLength: Int) on INPUT_FIELD_DEFINITION

type ArchiveLinkError {
  message: String!
  errorCodes: [ArchiveLinkErrorCode!]!
}

enum ArchiveLinkErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
}

input ArchiveLinkInput {
  linkId: ID!
  archived: Boolean!
}

union ArchiveLinkResult = ArchiveLinkSuccess | ArchiveLinkError

type ArchiveLinkSuccess {
  linkId: String!
  message: String!
}

type Article {
  id: ID!
  title: String!
  slug: String!
  url: String!
  hash: String!
  content: String!
  pageType: PageType
  contentReader: ContentReader!
  hasContent: Boolean
  author: String
  image: String
  description: String
  originalHtml: String
  createdAt: Date!
  savedAt: Date!
  publishedAt: Date
  readingProgressPercent: Float!
  readingProgressAnchorIndex: Int!
  sharedComment: String
  savedByViewer: Boolean
  postedByViewer: Boolean
  originalArticleUrl: String
  highlights(input: ArticleHighlightsInput): [Highlight!]!
  shareInfo: LinkShareInfo
  isArchived: Boolean!
}

type ArticleEdge {
  cursor: String!
  node: Article!
}

type ArticleError {
  errorCodes: [ArticleErrorCode!]!
}

enum ArticleErrorCode {
  NOT_FOUND
  BAD_DATA
  UNAUTHORIZED
}

input ArticleHighlightsInput {
  includeFriends: Boolean
}

union ArticleResult = ArticleSuccess | ArticleError

type ArticleSavingRequest {
  id: ID!
  userId: ID! @deprecated(reason: "userId has been replaced with user")
  user: User!
  article: Article
  status: ArticleSavingRequestStatus!
  errorCode: CreateArticleErrorCode
  createdAt: Date!
  updatedAt: Date!
}

type ArticleSavingRequestError {
  errorCodes: [ArticleSavingRequestErrorCode!]!
}

enum ArticleSavingRequestErrorCode {
  UNAUTHORIZED
  NOT_FOUND
}

union ArticleSavingRequestResult = ArticleSavingRequestSuccess | ArticleSavingRequestError

enum ArticleSavingRequestStatus {
  PROCESSING
  SUCCEEDED
  FAILED
}

type ArticleSavingRequestSuccess {
  articleSavingRequest: ArticleSavingRequest!
}

type ArticleSuccess {
  article: Article!
}

type ArticlesError {
  errorCodes: [ArticlesErrorCode!]!
}

enum ArticlesErrorCode {
  UNAUTHORIZED
}

union ArticlesResult = ArticlesSuccess | ArticlesError

type ArticlesSuccess {
  edges: [ArticleEdge!]!
  pageInfo: PageInfo!
}

enum ContentReader {
  WEB
  PDF
}

type CreateArticleError {
  errorCodes: [CreateArticleErrorCode!]!
}

enum CreateArticleErrorCode {
  UNABLE_TO_FETCH
  UNABLE_TO_PARSE
  UNAUTHORIZED
  NOT_ALLOWED_TO_PARSE
  PAYLOAD_TOO_LARGE
  UPLOAD_FILE_MISSING
}

input CreateArticleInput {
  url: String!
  preparedDocument: PreparedDocumentInput
  articleSavingRequestId: ID
  uploadFileId: ID
  skipParsing: Boolean
  source: String
}

union CreateArticleResult = CreateArticleSuccess | CreateArticleError

type CreateArticleSavingRequestError {
  errorCodes: [CreateArticleSavingRequestErrorCode!]!
}

enum CreateArticleSavingRequestErrorCode {
  UNAUTHORIZED
  BAD_DATA
}

input CreateArticleSavingRequestInput {
  url: String!
}

union CreateArticleSavingRequestResult = CreateArticleSavingRequestSuccess | CreateArticleSavingRequestError

type CreateArticleSavingRequestSuccess {
  articleSavingRequest: ArticleSavingRequest!
}

type CreateArticleSuccess {
  createdArticle: Article!
  user: User!
  created: Boolean!
}

type CreateHighlightError {
  errorCodes: [CreateHighlightErrorCode!]!
}

enum CreateHighlightErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  BAD_DATA
  NOT_FOUND
  ALREADY_EXISTS
}

input CreateHighlightInput {
  id: ID!
  shortId: String!
  articleId: ID!
  patch: String!
  quote: String!
  prefix: String
  suffix: String
  annotation: String
  sharedAt: Date
}

type CreateHighlightReplyError {
  errorCodes: [CreateHighlightReplyErrorCode!]!
}

enum CreateHighlightReplyErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  NOT_FOUND
  EMPTY_ANNOTATION
}

input CreateHighlightReplyInput {
  highlightId: ID!
  text: String!
}

union CreateHighlightReplyResult = CreateHighlightReplySuccess | CreateHighlightReplyError

type CreateHighlightReplySuccess {
  highlightReply: HighlightReply!
}

union CreateHighlightResult = CreateHighlightSuccess | CreateHighlightError

type CreateHighlightSuccess {
  highlight: Highlight!
}

type CreateLabelError {
  errorCodes: [CreateLabelErrorCode!]!
}

enum CreateLabelErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

input CreateLabelInput {
  linkId: ID!
  name: String!
}

union CreateLabelResult = CreateLabelSuccess | CreateLabelError

type CreateLabelSuccess {
  label: Label!
}

type CreateNewsletterEmailError {
  errorCodes: [CreateNewsletterEmailErrorCode!]!
}

enum CreateNewsletterEmailErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
}

union CreateNewsletterEmailResult = CreateNewsletterEmailSuccess | CreateNewsletterEmailError

type CreateNewsletterEmailSuccess {
  newsletterEmail: NewsletterEmail!
}

type CreateReactionError {
  errorCodes: [CreateReactionErrorCode!]!
}

enum CreateReactionErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  BAD_TARGET
  BAD_CODE
  NOT_FOUND
}

input CreateReactionInput {
  highlightId: ID
  userArticleId: ID
  code: ReactionType!
}

union CreateReactionResult = CreateReactionSuccess | CreateReactionError

type CreateReactionSuccess {
  reaction: Reaction!
}

type CreateReminderError {
  errorCodes: [CreateReminderErrorCode!]!
}

enum CreateReminderErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

input CreateReminderInput {
  linkId: ID
  clientRequestId: ID
  archiveUntil: Boolean!
  sendNotification: Boolean!
  remindAt: Date!
}

union CreateReminderResult = CreateReminderSuccess | CreateReminderError

type CreateReminderSuccess {
  reminder: Reminder!
}

scalar Date

type DeleteHighlightError {
  errorCodes: [DeleteHighlightErrorCode!]!
}

enum DeleteHighlightErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  NOT_FOUND
}

type DeleteHighlightReplyError {
  errorCodes: [DeleteHighlightReplyErrorCode!]!
}

enum DeleteHighlightReplyErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  NOT_FOUND
}

union DeleteHighlightReplyResult = DeleteHighlightReplySuccess | DeleteHighlightReplyError

type DeleteHighlightReplySuccess {
  highlightReply: HighlightReply!
}

union DeleteHighlightResult = DeleteHighlightSuccess | DeleteHighlightError

type DeleteHighlightSuccess {
  highlight: Highlight!
}

type DeleteLabelError {
  errorCodes: [DeleteLabelErrorCode!]!
}

enum DeleteLabelErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

union DeleteLabelResult = DeleteLabelSuccess | DeleteLabelError

type DeleteLabelSuccess {
  label: Label!
}

type DeleteNewsletterEmailError {
  errorCodes: [DeleteNewsletterEmailErrorCode!]!
}

enum DeleteNewsletterEmailErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

union DeleteNewsletterEmailResult = DeleteNewsletterEmailSuccess | DeleteNewsletterEmailError

type DeleteNewsletterEmailSuccess {
  newsletterEmail: NewsletterEmail!
}

type DeleteReactionError {
  errorCodes: [DeleteReactionErrorCode!]!
}

enum DeleteReactionErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  NOT_FOUND
}

union DeleteReactionResult = DeleteReactionSuccess | DeleteReactionError

type DeleteReactionSuccess {
  reaction: Reaction!
}

type DeleteReminderError {
  errorCodes: [DeleteReminderErrorCode!]!
}

enum DeleteReminderErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

union DeleteReminderResult = DeleteReminderSuccess | DeleteReminderError

type DeleteReminderSuccess {
  reminder: Reminder!
}

type DeviceToken {
  id: ID!
  token: String!
  createdAt: Date!
}

type FeedArticle {
  id: ID!
  article: Article!
  sharedBy: User!
  sharedAt: Date!
  sharedComment: String
  sharedWithHighlights: Boolean
  highlightsCount: Int
  annotationsCount: Int
  highlight: Highlight
  reactions: [Reaction!]!
}

type FeedArticleEdge {
  cursor: String!
  node: FeedArticle!
}

type FeedArticlesError {
  errorCodes: [FeedArticlesErrorCode!]!
}

enum FeedArticlesErrorCode {
  UNAUTHORIZED
}

union FeedArticlesResult = FeedArticlesSuccess | FeedArticlesError

type FeedArticlesSuccess {
  edges: [FeedArticleEdge!]!
  pageInfo: PageInfo!
}

type GetFollowersError {
  errorCodes: [GetFollowersErrorCode!]!
}

enum GetFollowersErrorCode {
  UNAUTHORIZED
}

union GetFollowersResult = GetFollowersSuccess | GetFollowersError

type GetFollowersSuccess {
  followers: [User!]!
}

type GetFollowingError {
  errorCodes: [GetFollowingErrorCode!]!
}

enum GetFollowingErrorCode {
  UNAUTHORIZED
}

union GetFollowingResult = GetFollowingSuccess | GetFollowingError

type GetFollowingSuccess {
  following: [User!]!
}

type GetUserPersonalizationError {
  errorCodes: [GetUserPersonalizationErrorCode!]!
}

enum GetUserPersonalizationErrorCode {
  UNAUTHORIZED
}

union GetUserPersonalizationResult = GetUserPersonalizationSuccess | GetUserPersonalizationError

type GetUserPersonalizationSuccess {
  userPersonalization: UserPersonalization
}

input GoogleLoginInput {
  secret: String!
  email: String!
}

type GoogleSignupError {
  errorCodes: [SignupErrorCode]!
}

input GoogleSignupInput {
  secret: String!
  email: String!
  username: String!
  name: String!
  pictureUrl: String!
  sourceUserId: String!
  bio: String
}

union GoogleSignupResult = GoogleSignupSuccess | GoogleSignupError

type GoogleSignupSuccess {
  me: User!
}

type Highlight {
  id: ID!
  shortId: String!
  user: User!
  article: Article!
  quote: String!
  prefix: String
  suffix: String
  patch: String!
  annotation: String
  replies: [HighlightReply!]!
  sharedAt: Date
  createdAt: Date!
  updatedAt: Date!
  reactions: [Reaction!]!
  createdByMe: Boolean!
}

type HighlightReply {
  id: ID!
  user: User!
  highlight: Highlight!
  text: String!
  createdAt: Date!
  updatedAt: Date!
}

type HighlightStats {
  highlightCount: Int!
}

type Label {
  id: ID!
  name: String!
}

type LabelsError {
  errorCodes: [LabelsErrorCode!]!
}

enum LabelsErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

union LabelsResult = LabelsSuccess | LabelsError

type LabelsSuccess {
  labels: [Label!]!
}

type Link {
  id: ID!
  url: String!
  slug: String!
  savedBy: User!
  savedAt: Date!
  savedByViewer: Boolean!
  postedByViewer: Boolean!
  readState: ReadState!
  highlightStats: HighlightStats!
  shareInfo: LinkShareInfo!
  shareStats: ShareStats!
  page: Page!
}

type LinkShareInfo {
  title: String!
  description: String!
  imageUrl: String!
}

type LogOutError {
  errorCodes: [LogOutErrorCode!]!
}

enum LogOutErrorCode {
  LOG_OUT_FAILED
}

union LogOutResult = LogOutSuccess | LogOutError

type LogOutSuccess {
  message: String
}

type LoginError {
  errorCodes: [LoginErrorCode!]!
}

enum LoginErrorCode {
  AUTH_FAILED
  USER_ALREADY_EXISTS
  INVALID_CREDENTIALS
  USER_NOT_FOUND
  WRONG_SOURCE
  ACCESS_DENIED
}

input LoginInput {
  password: String!
  email: String!
}

union LoginResult = LoginSuccess | LoginError

type LoginSuccess {
  me: User!
}

type MergeHighlightError {
  errorCodes: [MergeHighlightErrorCode!]!
}

enum MergeHighlightErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  BAD_DATA
  NOT_FOUND
  ALREADY_EXISTS
}

input MergeHighlightInput {
  id: ID!
  shortId: ID!
  articleId: ID!
  patch: String!
  quote: String!
  prefix: String
  suffix: String
  annotation: String
  overlapHighlightIdList: [String!]!
}

union MergeHighlightResult = MergeHighlightSuccess | MergeHighlightError

type MergeHighlightSuccess {
  highlight: Highlight!
  overlapHighlightIdList: [String!]!
}

type Mutation {
  googleLogin(input: GoogleLoginInput!): LoginResult!
  googleSignup(input: GoogleSignupInput!): GoogleSignupResult!
  logOut: LogOutResult!
  updateUser(input: UpdateUserInput!): UpdateUserResult!
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfileResult!
  createArticle(input: CreateArticleInput!): CreateArticleResult!
  createHighlight(input: CreateHighlightInput!): CreateHighlightResult!
  mergeHighlight(input: MergeHighlightInput!): MergeHighlightResult!
  updateHighlight(input: UpdateHighlightInput!): UpdateHighlightResult!
  deleteHighlight(highlightId: ID!): DeleteHighlightResult!
  createHighlightReply(input: CreateHighlightReplyInput!): CreateHighlightReplyResult!
  updateHighlightReply(input: UpdateHighlightReplyInput!): UpdateHighlightReplyResult!
  deleteHighlightReply(highlightReplyId: ID!): DeleteHighlightReplyResult!
  createReaction(input: CreateReactionInput!): CreateReactionResult!
  deleteReaction(id: ID!): DeleteReactionResult!
  uploadFileRequest(input: UploadFileRequestInput!): UploadFileRequestResult!
  saveArticleReadingProgress(input: SaveArticleReadingProgressInput!): SaveArticleReadingProgressResult!
  setShareArticle(input: SetShareArticleInput!): SetShareArticleResult!
  updateSharedComment(input: UpdateSharedCommentInput!): UpdateSharedCommentResult!
  setFollow(input: SetFollowInput!): SetFollowResult!
  setBookmarkArticle(input: SetBookmarkArticleInput!): SetBookmarkArticleResult!
  setUserPersonalization(input: SetUserPersonalizationInput!): SetUserPersonalizationResult!
  createArticleSavingRequest(input: CreateArticleSavingRequestInput!): CreateArticleSavingRequestResult!
  setShareHighlight(input: SetShareHighlightInput!): SetShareHighlightResult!
  reportItem(input: ReportItemInput!): ReportItemResult!
  updateLinkShareInfo(input: UpdateLinkShareInfoInput!): UpdateLinkShareInfoResult!
  setLinkArchived(input: ArchiveLinkInput!): ArchiveLinkResult!
  createNewsletterEmail: CreateNewsletterEmailResult!
  deleteNewsletterEmail(newsletterEmailId: ID!): DeleteNewsletterEmailResult!
  saveUrl(input: SaveUrlInput!): SaveResult!
  savePage(input: SavePageInput!): SaveResult!
  saveFile(input: SaveFileInput!): SaveResult!
  createReminder(input: CreateReminderInput!): CreateReminderResult!
  updateReminder(input: UpdateReminderInput!): UpdateReminderResult!
  deleteReminder(id: ID!): DeleteReminderResult!
  setDeviceToken(input: SetDeviceTokenInput!): SetDeviceTokenResult!
  createLabel(input: CreateLabelInput!): CreateLabelResult!
  deleteLabel(id: ID!): DeleteLabelResult!
  login(input: LoginInput!): LoginResult!
  signup(input: SignupInput!): SignupResult!
}

type NewsletterEmail {
  id: ID!
  address: String!
  confirmationCode: String
}

type NewsletterEmailsError {
  errorCodes: [NewsletterEmailsErrorCode!]!
}

enum NewsletterEmailsErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
}

union NewsletterEmailsResult = NewsletterEmailsSuccess | NewsletterEmailsError

type NewsletterEmailsSuccess {
  newsletterEmails: [NewsletterEmail!]!
}

type Page {
  id: ID!
  url: String!
  hash: String!
  originalUrl: String!
  type: PageType!
  image: String!
  title: String!
  author: String!
  description: String!
  publishedAt: Date
  originalHtml: String!
  readableHtml: String!
  createdAt: Date!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
  totalCount: Int
}

input PageInfoInput {
  title: String
  author: String
  description: String
  previewImage: String
  canonicalUrl: String
  publishedAt: Date
  contentType: String
}

enum PageType {
  ARTICLE
  BOOK
  FILE
  PROFILE
  WEBSITE
  UNKNOWN
}

input PreparedDocumentInput {
  document: String!
  pageInfo: PageInfoInput!
}

type Profile {
  id: ID!
  username: String!
  private: Boolean!
  bio: String
  pictureUrl: String
}

type Query {
  hello: String
  me: User
  user(userId: ID, username: String): UserResult!
  articles(sharedOnly: Boolean, sort: SortParams, after: String, first: Int, query: String): ArticlesResult!
  article(username: String!, slug: String!): ArticleResult!
  sharedArticle(username: String!, slug: String!, selectedHighlightId: String): SharedArticleResult!
  feedArticles(after: String, first: Int, sort: SortParams, sharedByUser: ID): FeedArticlesResult!
  users: UsersResult!
  validateUsername(username: String!): Boolean!
  getFollowers(userId: ID): GetFollowersResult!
  getFollowing(userId: ID): GetFollowingResult!
  getUserPersonalization: GetUserPersonalizationResult!
  articleSavingRequest(id: ID!): ArticleSavingRequestResult!
  newsletterEmails: NewsletterEmailsResult!
  reminder(linkId: ID!): ReminderResult!
  labels(linkId: ID!): LabelsResult!
}

type Reaction {
  id: ID!
  user: User!
  code: ReactionType!
  createdAt: Date!
  updatedAt: Date
}

enum ReactionType {
  LIKE
  HEART
  SMILE
  HUSHED
  CRYING
  POUT
}

type ReadState {
  reading: Boolean
  readingTime: Int
  progressPercent: Float!
  progressAnchorIndex: Int!
}

type Reminder {
  id: ID!
  archiveUntil: Boolean!
  sendNotification: Boolean!
  remindAt: Date!
}

type ReminderError {
  errorCodes: [ReminderErrorCode!]!
}

enum ReminderErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

union ReminderResult = ReminderSuccess | ReminderError

type ReminderSuccess {
  reminder: Reminder!
}

input ReportItemInput {
  pageId: ID!
  itemUrl: String!
  sharedBy: ID
  reportTypes: [ReportType!]!
  reportComment: String!
}

type ReportItemResult {
  message: String!
}

enum ReportType {
  SPAM
  ABUSIVE
  CONTENT_DISPLAY
  CONTENT_VIOLATION
}

type SaveArticleReadingProgressError {
  errorCodes: [SaveArticleReadingProgressErrorCode!]!
}

enum SaveArticleReadingProgressErrorCode {
  NOT_FOUND
  BAD_DATA
  UNAUTHORIZED
}

input SaveArticleReadingProgressInput {
  id: ID!
  readingProgressPercent: Float!
  readingProgressAnchorIndex: Int!
}

union SaveArticleReadingProgressResult = SaveArticleReadingProgressSuccess | SaveArticleReadingProgressError

type SaveArticleReadingProgressSuccess {
  updatedArticle: Article!
}

type SaveError {
  errorCodes: [SaveErrorCode!]!
  message: String
}

enum SaveErrorCode {
  UNKNOWN
  UNAUTHORIZED
}

input SaveFileInput {
  url: String!
  source: String!
  clientRequestId: ID!
  uploadFileId: ID!
}

input SavePageInput {
  url: String!
  source: String!
  clientRequestId: ID!
  title: String
  originalContent: String!
}

union SaveResult = SaveSuccess | SaveError

type SaveSuccess {
  url: String!
  clientRequestId: ID!
}

input SaveUrlInput {
  url: String!
  source: String!
  clientRequestId: ID!
}

type SetBookmarkArticleError {
  errorCodes: [SetBookmarkArticleErrorCode!]!
}

enum SetBookmarkArticleErrorCode {
  NOT_FOUND
  BOOKMARK_EXISTS
}

input SetBookmarkArticleInput {
  articleID: ID!
  bookmark: Boolean!
}

union SetBookmarkArticleResult = SetBookmarkArticleSuccess | SetBookmarkArticleError

type SetBookmarkArticleSuccess {
  bookmarkedArticle: Article!
}

type SetDeviceTokenError {
  errorCodes: [SetDeviceTokenErrorCode!]!
}

enum SetDeviceTokenErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

input SetDeviceTokenInput {
  id: ID
  token: String
}

union SetDeviceTokenResult = SetDeviceTokenSuccess | SetDeviceTokenError

type SetDeviceTokenSuccess {
  deviceToken: DeviceToken!
}

type SetFollowError {
  errorCodes: [SetFollowErrorCode!]!
}

enum SetFollowErrorCode {
  NOT_FOUND
  UNAUTHORIZED
}

input SetFollowInput {
  userId: ID!
  follow: Boolean!
}

union SetFollowResult = SetFollowSuccess | SetFollowError

type SetFollowSuccess {
  updatedUser: User!
}

type SetShareArticleError {
  errorCodes: [SetShareArticleErrorCode!]!
}

enum SetShareArticleErrorCode {
  NOT_FOUND
  UNAUTHORIZED
}

input SetShareArticleInput {
  articleID: ID!
  share: Boolean!
  sharedComment: String
  sharedWithHighlights: Boolean
}

union SetShareArticleResult = SetShareArticleSuccess | SetShareArticleError

type SetShareArticleSuccess {
  updatedFeedArticleId: String
  updatedFeedArticle: FeedArticle
  updatedArticle: Article!
}

type SetShareHighlightError {
  errorCodes: [SetShareHighlightErrorCode!]!
}

enum SetShareHighlightErrorCode {
  UNAUTHORIZED
  NOT_FOUND
  FORBIDDEN
}

input SetShareHighlightInput {
  id: ID!
  share: Boolean!
}

union SetShareHighlightResult = SetShareHighlightSuccess | SetShareHighlightError

type SetShareHighlightSuccess {
  highlight: Highlight!
}

type SetUserPersonalizationError {
  errorCodes: [SetUserPersonalizationErrorCode!]!
}

enum SetUserPersonalizationErrorCode {
  UNAUTHORIZED
}

input SetUserPersonalizationInput {
  theme: String
  fontSize: Int
  fontFamily: String
  margin: Int
  libraryLayoutType: String
  librarySortOrder: SortOrder
}

union SetUserPersonalizationResult = SetUserPersonalizationSuccess | SetUserPersonalizationError

type SetUserPersonalizationSuccess {
  updatedUserPersonalization: UserPersonalization!
}

type ShareStats {
  viewCount: Int!
  saveCount: Int!
  readDuration: Int!
}

type SharedArticleError {
  errorCodes: [SharedArticleErrorCode!]!
}

enum SharedArticleErrorCode {
  NOT_FOUND
}

union SharedArticleResult = SharedArticleSuccess | SharedArticleError

type SharedArticleSuccess {
  article: Article!
}

type SignupError {
  errorCodes: [SignupErrorCode]!
}

enum SignupErrorCode {
  UNKNOWN
  ACCESS_DENIED
  GOOGLE_AUTH_ERROR
  INVALID_USERNAME
  USER_EXISTS
  EXPIRED_TOKEN
  INVALID_PASSWORD
}

input SignupInput {
  email: String!
  password: String!
  username: String!
  name: String!
  pictureUrl: String
  bio: String
}

union SignupResult = SignupSuccess | SignupError

type SignupSuccess {
  me: User!
}

enum SortBy {
  UPDATED_TIME
}

enum SortOrder {
  ASCENDING
  DESCENDING
}

input SortParams {
  order: SortOrder
  by: SortBy!
}

type UpdateHighlightError {
  errorCodes: [UpdateHighlightErrorCode!]!
}

enum UpdateHighlightErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  NOT_FOUND
  BAD_DATA
}

input UpdateHighlightInput {
  highlightId: ID!
  annotation: String
  sharedAt: Date
}

type UpdateHighlightReplyError {
  errorCodes: [UpdateHighlightReplyErrorCode!]!
}

enum UpdateHighlightReplyErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  NOT_FOUND
}

input UpdateHighlightReplyInput {
  highlightReplyId: ID!
  text: String!
}

union UpdateHighlightReplyResult = UpdateHighlightReplySuccess | UpdateHighlightReplyError

type UpdateHighlightReplySuccess {
  highlightReply: HighlightReply!
}

union UpdateHighlightResult = UpdateHighlightSuccess | UpdateHighlightError

type UpdateHighlightSuccess {
  highlight: Highlight!
}

type UpdateLinkShareInfoError {
  errorCodes: [UpdateLinkShareInfoErrorCode!]!
}

enum UpdateLinkShareInfoErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
}

input UpdateLinkShareInfoInput {
  linkId: ID!
  title: String!
  description: String!
}

union UpdateLinkShareInfoResult = UpdateLinkShareInfoSuccess | UpdateLinkShareInfoError

type UpdateLinkShareInfoSuccess {
  message: String!
}

type UpdateReminderError {
  errorCodes: [UpdateReminderErrorCode!]!
}

enum UpdateReminderErrorCode {
  UNAUTHORIZED
  BAD_REQUEST
  NOT_FOUND
}

input UpdateReminderInput {
  id: ID!
  archiveUntil: Boolean!
  sendNotification: Boolean!
  remindAt: Date!
}

union UpdateReminderResult = UpdateReminderSuccess | UpdateReminderError

type UpdateReminderSuccess {
  reminder: Reminder!
}

type UpdateSharedCommentError {
  errorCodes: [UpdateSharedCommentErrorCode!]!
}

enum UpdateSharedCommentErrorCode {
  NOT_FOUND
  UNAUTHORIZED
}

input UpdateSharedCommentInput {
  articleID: ID!
  sharedComment: String!
}

union UpdateSharedCommentResult = UpdateSharedCommentSuccess | UpdateSharedCommentError

type UpdateSharedCommentSuccess {
  articleID: ID!
  sharedComment: String!
}

type UpdateUserError {
  errorCodes: [UpdateUserErrorCode!]!
}

enum UpdateUserErrorCode {
  EMPTY_NAME
  BIO_TOO_LONG
  USER_NOT_FOUND
  UNAUTHORIZED
}

input UpdateUserInput {
  name: String!
  bio: String
}

type UpdateUserProfileError {
  errorCodes: [UpdateUserProfileErrorCode!]!
}

enum UpdateUserProfileErrorCode {
  UNAUTHORIZED
  FORBIDDEN
  BAD_DATA
  BAD_USERNAME
  USERNAME_EXISTS
}

input UpdateUserProfileInput {
  userId: ID!
  username: String
  bio: String
  pictureUrl: String
}

union UpdateUserProfileResult = UpdateUserProfileSuccess | UpdateUserProfileError

type UpdateUserProfileSuccess {
  user: User!
}

union UpdateUserResult = UpdateUserSuccess | UpdateUserError

type UpdateUserSuccess {
  user: User!
}

type UploadFileRequestError {
  errorCodes: [UploadFileRequestErrorCode!]!
}

enum UploadFileRequestErrorCode {
  UNAUTHORIZED
  BAD_INPUT
  FAILED_CREATE
}

input UploadFileRequestInput {
  url: String!
  contentType: String!
}

union UploadFileRequestResult = UploadFileRequestSuccess | UploadFileRequestError

type UploadFileRequestSuccess {
  id: ID!
  uploadSignedUrl: String
  uploadFileId: ID
}

enum UploadFileStatus {
  INITIALIZED
  COMPLETED
}

type User {
  id: ID!
  name: String!
  isFullUser: Boolean
  viewerIsFollowing: Boolean
  isFriend: Boolean @deprecated(reason: "isFriend has been replaced with viewerIsFollowing")
  picture: String
  profile: Profile!
  sharedArticles: [FeedArticle!]!
  sharedArticlesCount: Int
  sharedHighlightsCount: Int
  sharedNotesCount: Int
  friendsCount: Int
  followersCount: Int
}

type UserError {
  errorCodes: [UserErrorCode!]!
}

enum UserErrorCode {
  UNAUTHORIZED
  USER_NOT_FOUND
  BAD_REQUEST
}

type UserPersonalization {
  id: ID
  theme: String
  fontSize: Int
  fontFamily: String
  margin: Int
  libraryLayoutType: String
  librarySortOrder: SortOrder
}

union UserResult = UserSuccess | UserError

type UserSuccess {
  user: User!
}

type UsersError {
  errorCodes: [UsersErrorCode!]!
}

enum UsersErrorCode {
  UNAUTHORIZED
}

union UsersResult = UsersSuccess | UsersError

type UsersSuccess {
  users: [User!]!
}
